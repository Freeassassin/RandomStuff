actions = [[0, 0, (112, -6)], [0, 1, (112, -5)], [0, 2, (112, -5)], [0, 3, (112, -5)], [0, 4, (112, -5)], [0, 5, (112, -4)], [0, 6, (112, -4)], [1, 0, (112, -6)], [1, 1, (111, 2)], [1, 2, (111, 2)], [1, 3, (111, 2)], [1, 4, (111, 2)], [1, 5, (111, 2)], [1, 6, (111, 2)], [1, 7, (111, 2)], [2, 0, (111, 2)], [2, 1, (111, 2)], [2, 2, (108, 2)], [2, 3, (108, 2)], [2, 4, (108, 2)], [2, 5, (108, 2)], [2, 6, (108, 2)], [3, 0, (109, 2)], [3, 1, (109, 2)], [3, 2, (109, 2)], [3, 3, (109, 2)], [3, 4, (108, 2)], [3, 5, (108, 2)], [3, 6, (108, 2)], [3, 7, (108, 2)]]


def determine_action(actions):
    #min(data, key = lambda t: t[1])
    best_action = actions[0]
    for i in actions:
        if i[2] == min([i[2],best_action[2]], key = lambda t: t[1]):
            best_action = i

    action = best_action

    return action

print(determine_action(actions))